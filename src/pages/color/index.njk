{% extends "case.njk" %}
{% set title = "" %}
{% set slug = "appsmith" %}
{% set description = "Magically accessible and harmonious color palettes for UI made from a single* input" %}
{% block colors %}
<style type='text/css'>
    :root {
        --bg: #f2f2f2;
        --fg: #0c2e44;
        --radius-base: 0.25em;
        --smooth-update: 0.5s;
        --brief-update: 0.1s;
    }
    .case-grid figure.demo {
        flex-direction: row;
    }
    .demo * {
        font-family: sans-serif;
    }
    .demo .slice {
        max-width: 50%;
        display: flex;
        flex-direction: column;
        gap: var(--space-2xs);
        justify-content: center;
        padding: var(--space-3xl) var(--space-l);
        transition: background-color var(--smooth-update) ease-in-out;
    }
    .slice.light {
        background-color: var(--color-light-bg);
    }
    .slice.dark {
        background-color: var(--color-dark-bg);
    }

    .slice button {
        max-width: 16ch;
        border: none;
        border-radius: round(var(--radius-base), 1px);
        padding: var(--space-3xs);
        transition: all var(--smooth-update) ease-in-out;
        font-weight: 500;
        letter-spacing: -0.02em;
    }
    .slice button:hover {
        transition-duration: var(--brief-update);
    }
    .slice.light button {
        background-color: var(--color-light-bgAccent);
        color: var(--color-light-fgOnAccent);
    }
    .slice.light button:hover {
        background-color: var(--color-light-bgAccentHover);
    }
    .slice.light button:active {
        background-color: var(--color-light-bgAccentActive);
    }
    .slice.dark button {
        background-color: var(--color-dark-bgAccent);
        color: var(--color-dark-fgOnAccent);
    }
    .slice.dark button:hover {
        background-color: var(--color-dark-bgAccentHover);
    }
    .slice.dark button:active {
        background-color: var(--color-dark-bgAccentActive);
    }

    .slice input {
        max-width: 30ch;
        border: none;
        border-radius: round(var(--radius-base), 1px);
        padding: var(--space-3xs);
        transition: all var(--smooth-update) ease-in-out;
        font-weight: 400;
    }
    .slice input::placeholder {
        font-weight: 400;
    }
    .slice.light input {
        background-color: var(--color-light-bgNeutralSubtle);
    }
    .slice.light input::placeholder {
        color: var(--color-light-fgNeutralSubtle);
    }
    .slice.dark input {
        background-color: var(--color-dark-bgNeutralSubtle);
    }
    .slice.dark input::placeholder {
        color: var(--color-dark-fgNeutralSubtle);
    }
</style>
{% endblock %}

{% block scripts %}
<script src='https://colorjs.io/dist/color.global.min.js'></script>
<script src='../main.js'></script>
<script>
    let intervalId;

    function appendCssRules(lightTheme, darkTheme) {
        const root = document.querySelector(':root');

        Object.keys(lightTheme).forEach(tokenKey => {
            const token = lightTheme[tokenKey];
            root.style.setProperty(`--color-light-${tokenKey}`, token);
        });

        Object.keys(darkTheme).forEach(tokenKey => {
            const token = darkTheme[tokenKey];
            root.style.setProperty(`--color-dark-${tokenKey}`, token);
        });
    }

    function debounce(func, delay) {
        let debounceTimer;
        return function (...args) {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => func(...args), delay);
        };
    }

    function handleInput(event) {
        const inputValue = event.target.value;
        const lightTheme = new LightTheme(inputValue).getColors();
        const darkTheme = new DarkTheme(inputValue).getColors();
        appendCssRules(lightTheme, darkTheme);
    }

    function generateRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function updateDefaultValue() {
        const newDefaultValue = generateRandomColor();
        const inputElement = document.getElementById('myInput');
        inputElement.value = newDefaultValue;

        const lightTheme = new LightTheme(newDefaultValue).getColors();
        const darkTheme = new DarkTheme(newDefaultValue).getColors();
        appendCssRules(lightTheme, darkTheme);
    }

    function checkFocusAndSetInterval() {
        const inputElement = document.getElementById('myInput');
        if (document.activeElement === inputElement) {
            if (!intervalId) {
                intervalId = setInterval(updateDefaultValue, 4000);
            }
        } else {
            clearInterval(intervalId);
            intervalId = null;
        }
    }

    window.addEventListener('DOMContentLoaded', () => {
        const defaultValue = '#0080ff';
        const inputElement = document.getElementById('myInput');
        inputElement.value = defaultValue;

        const lightTheme = new LightTheme(defaultValue).getColors();
        const darkTheme = new DarkTheme(defaultValue).getColors();
        appendCssRules(lightTheme, darkTheme);

        inputElement.addEventListener('input', debounce(handleInput, 300));
        inputElement.addEventListener('focus', checkFocusAndSetInterval);
        inputElement.addEventListener('blur', checkFocusAndSetInterval);
    });
</script>
{% endblock %}

{% block content %}
<h1><strong>New</strong> Interface Colors</h1>
<input type='text' id='myInput'>
<figure class='full demo'>
    <div class='slice light'>
        <input type='text' placeholder="User's input">
        <button>Do the Thing</button>
    </div>
    <div class='slice dark'>
        <input type='text' placeholder="User's input">
        <button>Do the Thing</button>
    </div>
</figure>
{% endblock %}
